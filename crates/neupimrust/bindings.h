#ifndef BINDINGS_H
#define BINDINGS_H

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>


namespace sjq_rust {

enum class LogLevel {
  Debug,
  Info,
  Warn,
  Error,
};

/// Run stages
enum class RunStage {
  A,
  B,
  C,
  D,
  E,
  F,
  Finished,
};

struct GlobalCountsCtx;

struct NoIcnt {
  size_t total_packages;
};

/// A struct representing the application settings.
struct Settings {
  bool fast_read;
  bool fast_icnt;
  bool no_conflict_act_to_gact;
  bool no_conflict_gact_to_act;
};


extern "C" {

/// 增加计算操作的计数
///
/// # 参数
///
/// * `computes` - 要增加的计算操作数量
void add_computes(GlobalCountsCtx *ctx, uint64_t computes);

/// 增加加载操作的计数
///
/// # 参数
///
/// * `loads` - 要增加的加载操作数量
void add_loads(GlobalCountsCtx *ctx, uint64_t loads, uint64_t cycle);

/// 增加存储操作的计数
///
/// # 参数
///
/// * `stores` - 要增加的存储操作数量
void add_stores(GlobalCountsCtx *ctx, uint64_t stores, uint64_t cycle);

void delete_icnt(NoIcnt *ptr);

/// 释放`GlobalCountsCtx`。
void drop_global_counts_ctx(GlobalCountsCtx *ctx);

void end_stage(GlobalCountsCtx *ctx, RunStage stage, uint64_t cycle);

/// 获取当前的计算操作计数
///
/// # 返回值
///
/// 返回当前的计算操作总数
uint64_t get_computes(const GlobalCountsCtx *ctx);

/// 获取当前的加载操作计数
///
/// # 返回值
///
/// 返回当前的加载操作总数
uint64_t get_loads(const GlobalCountsCtx *ctx);

/// Retrieves the current settings as a pointer to a `Settings` instance.
///
/// Returns a null pointer if the settings have not been initialized.
const Settings *get_settings();

/// 获取当前的存储操作计数
///
/// # 返回值
///
/// 返回当前的存储操作总数
uint64_t get_stores(const GlobalCountsCtx *ctx);

size_t get_total_packages(const NoIcnt *self);

/// 初始化日志记录器
///
/// # 参数
///
/// * `level` - 日志级别
void init_logger(LogLevel level);

/// Initializes the settings using a default file path ("sjq.toml").
void init_settings();

/// Initializes the settings from a file specified by a C-style string path.
///
/// # Safety
///
/// This function is unsafe because it dereferences a raw pointer.
void init_settings_with_file(const char *file_path);

/// 创建一个新的`GlobalCountsCtx`。
GlobalCountsCtx *new_global_counts_ctx();

NoIcnt *new_icnt();

void npu_finished(GlobalCountsCtx *ctx, uint64_t cycle);

void pim_finished(GlobalCountsCtx *ctx, uint64_t cycle);

void push(NoIcnt *self, uint32_t src, uint32_t dest, const void *request);

/// 减少计算操作的计数
///
/// # 参数
///
/// * `computes` - 要减少的计算操作数量
///
/// # 返回值
///
/// 如果减少操作成功，返回`true`；如果减少操作会导致计数变为负值，返回`false`
bool reduce_computes(GlobalCountsCtx *ctx,
                     uint64_t computes);

/// 减少加载操作的计数
///
/// # 参数
///
/// * `loads` - 要减少的加载操作数量
///
/// # 返回值
///
/// 如果减少操作成功，返回`true`；如果减少操作会导致计数变为负值，返回`false`
bool reduce_loads(GlobalCountsCtx *ctx,
                  uint64_t loads,
                  uint64_t cycle);

/// 减少存储操作的计数
///
/// # 参数
///
/// * `stores` - 要减少的存储操作数量
///
/// # 返回值
///
/// 如果减少操作成功，返回`true`；如果减少操作会导致计数变为负值，返回`false`
bool reduce_stores(GlobalCountsCtx *ctx,
                   uint64_t stores,
                   uint64_t cycle);

/// 保存累计的数据到文件
void save_global_counts_to_file(const GlobalCountsCtx *ctx);

void update_last_cycle(GlobalCountsCtx *ctx, uint64_t cycle);

void update_stage(GlobalCountsCtx *ctx, RunStage stage, uint64_t cycle);

}  // extern "C"

}  // namespace sjq_rust

#endif  // BINDINGS_H
